
services:
  mongodb:
    image: mongo:latest
    container_name: mongodb-jl
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - internal
    labels:
      traefik.enable: "false"

  management:
    build:
      context: ./backend/management
    container_name: management-jl
    restart: always
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_started
    networks:
      - internal
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health-check"]
      interval: 5s
      retries: 5
      timeout: 3s
    labels:
      traefik.enable:            "true"
      traefik.docker.network:    "web"
      traefik.http.services.management.loadbalancer.server.port: "8000"
      traefik.http.routers.management.rule:         "Host(`management.${DOMAIN}`)"
      traefik.http.routers.management.entrypoints:  "websecure"
      traefik.http.routers.management.tls:          "true"
      traefik.http.routers.management.tls.certresolver: "le"

  iam:
    build:
      context: ./backend/iam
    container_name: iam-jl
    env_file: [".env"]
    restart: always
    depends_on:
      - mongodb
    networks:
      - internal
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health-check"]
      interval: 5s
      retries: 5
      timeout: 3s    
    labels:
      traefik.enable:            "true"
      traefik.docker.network:    "web"
      traefik.http.services.iam.loadbalancer.server.port: "8000"
      traefik.http.routers.iam.rule:         "Host(`iam.${DOMAIN}`)"
      traefik.http.routers.iam.entrypoints:  "websecure"
      traefik.http.routers.iam.tls:          "true"
      traefik.http.routers.iam.tls.certresolver: "le"

  traefik:
    image: traefik:3.0
    container_name: traefik
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--providers.docker=true"
      - "--providers.docker.network=web"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email=daniel@mysingle.io"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=true"
      - "--api.insecure=false"

    labels:
      - "traefik.enable=true"

      # 1) match the host + path prefix
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=le"

      # 2) forward to the built‑in API/dashboard
      - "traefik.http.routers.api.service=api@internal"

      # 3) lock it down with basic auth
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASH_USERS}"
      - "traefik.http.routers.api.middlewares=traefik-auth"

    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"   # optional if you also want direct insecure access

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt

    networks:
      - web

  frontend:
    build:
      context: ./frontend
    container_name: jl-frontend
    restart: always
    env_file: [".env"]
    networks:
      - internal
      - web
    labels:
      traefik.enable:            "true"
      traefik.docker.network:    "web"
      traefik.http.services.frontend.loadbalancer.server.port: "3000"
      traefik.http.routers.frontend.rule:        "Host(`${DOMAIN}`)"
      traefik.http.routers.frontend.entrypoints: "websecure"
      traefik.http.routers.frontend.tls:         "true"
      traefik.http.routers.frontend.tls.certresolver: "le"

  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}     # 기본 Access Key
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}  # 기본 Secret Key
    volumes:
      - minio_data:/data
    networks:
      - internal
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 5
      timeout: 5s
    labels:
      traefik.enable: "false"
      traefik.docker.network: "web"
      traefik.http.services.minio.loadbalancer.server.port: "9000"
      traefik.http.routers.minio.rule:         "Host(`minio.${DOMAIN}`)"
      traefik.http.routers.minio.entrypoints:  "websecure"
      traefik.http.routers.minio.tls:          "true"
      traefik.http.routers.minio.tls.certresolver: "le"


volumes:
  mongo-data:
  minio_data:
    driver: local
    driver_opts:
      type: none
      device: /data/minio
      o: bind
  letsencrypt:
    driver: local
    driver_opts:
      type: none
      device: /data/letsencrypt
      o: bind

networks:
  web:
    external: true
  internal:
    driver: bridge
      
