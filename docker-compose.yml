
services:
  mongodb:
    image: mongo:latest
    container_name: mongodb-jl
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: daniel
      MONGO_INITDB_ROOT_PASSWORD: Goaltocut72
    volumes:
      - mongo-data:/data/db
    networks:
      - julyland-net

  management:
    image: backend:latest
    container_name: backend-jl
    restart: always
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_started
    networks:
      - julyland-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health-check"]
      interval: 5s
      retries: 5
      timeout: 3s
    labels:
      traefik.enable:            "true"
      traefik.docker.network:    "web"
      traefik.http.services.management.loadbalancer.server.port: "8000"
      traefik.http.routers.management.rule:         "Host(`management.${DOMAIN}`)"
      traefik.http.routers.management.entrypoints:  "websecure"
      traefik.http.routers.management.tls:          "true"
      traefik.http.routers.management.tls.certresolver: "le"

  iam:
    image: brotherdan21/iam:latest
    container_name: iam
    env_file: [".env"]
    restart: always
    depends_on:
      - mongodb
    networks:
      - internal
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health-check"]
      interval: 5s
      retries: 5
      timeout: 3s    
    labels:
      traefik.enable:            "true"
      traefik.docker.network:    "web"
      traefik.http.services.iam.loadbalancer.server.port: "8000"
      traefik.http.routers.iam.rule:         "Host(`iam.${DOMAIN}`)"
      traefik.http.routers.iam.entrypoints:  "websecure"
      traefik.http.routers.iam.tls:          "true"
      traefik.http.routers.iam.tls.certresolver: "le"

  traefik:
    image: traefik:3.0
    container_name: traefik
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--providers.docker=true"
      - "--providers.docker.network=web"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email=daniel@mysingle.io"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=true"
      - "--api.insecure=false"

    labels:
      - "traefik.enable=true"

      # 1) match the host + path prefix
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=le"

      # 2) forward to the builtâ€‘in API/dashboard
      - "traefik.http.routers.api.service=api@internal"

      # 3) lock it down with basic auth
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASH_USERS}"
      - "traefik.http.routers.api.middlewares=traefik-auth"

    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"   # optional if you also want direct insecure access

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt

    networks:
      - web

  frontend:
    image: brotherdan21/frontend:latest
    container_name: frontend
    restart: always
    env_file: [".env"]
    networks:
      - internal
      - web
    labels:
      traefik.enable:            "true"
      traefik.docker.network:    "web"
      traefik.http.services.frontend.loadbalancer.server.port: "3000"
      traefik.http.routers.frontend.rule:        "Host(`${DOMAIN}`)"
      traefik.http.routers.frontend.entrypoints: "websecure"
      traefik.http.routers.frontend.tls:         "true"
      traefik.http.routers.frontend.tls.certresolver: "le"



volumes:
  mongo-data:

networks:
  julyland-net:
    driver: bridge
      
